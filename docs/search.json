[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Final Presentation\n\n\n\n\n\n\n\nResearch\n\n\nPresentation\n\n\n\n\n\n\n\n\n\n\n\nNov 29, 2023\n\n\nHemanth Allamaneni, Jaleon Braxton, Shivani Chowdary, Meghana Koduru\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 8\n\n\n\n\n\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 7\n\n\n\n\n\n\n\ncode\n\n\ngraphs\n\n\n\n\n\n\n\n\n\n\n\nOct 20, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 6\n\n\n\n\n\n\n\ncode\n\n\ngraphs\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nResearch Proposal\n\n\n\n\n\n\n\nResearch\n\n\nPresentation\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2023\n\n\nHemanth Allamaneni, Jaleon Braxton, Shivani Chowdary, Meghana Koduru\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 5\n\n\n\n\n\n\n\ncode\n\n\ngraphs\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nGgplot charts\n\n\n\n\n\n\n\ncode\n\n\ngraphs\n\n\n\n\n\n\n\n\n\n\n\nSep 29, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nAnsocombe examples\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nThe field of cognitive science, or not?\n\n\n\n\n\n\n\nanalysis\n\n\nart\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nSeason Colors\n\n\n\n\n\n\n\nart\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\n  \n\n\n\n\nGenerative art\n\n\n\n\n\n\n\nanalysis\n\n\nart\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2023\n\n\nHemanth Allamaneni\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is blog used to publish my data analysis, exploration and various other observations!"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Anscombe examples/index.html",
    "href": "posts/Anscombe examples/index.html",
    "title": "Ansocombe examples",
    "section": "",
    "text": "These are all Anscombe examples, with pre-loaded dataset and code as provided.\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\npar(op)"
  },
  {
    "objectID": "posts/generative art/index.html",
    "href": "posts/generative art/index.html",
    "title": "Generative art",
    "section": "",
    "text": "Generative Art is a process of algorithmically generating new ideas, forms, shapes, colors or patterns. First, you create rules that provide boundaries for the creation process. Then a computer follows those rules to produce new works on your behalf.\n\n\n\nSprawl, by Mark J. Stock. This generative artwork begins as a set of rules and a world (the initial condition). Sometimes it takes millions of iterations for a pattern to emerge, depending on the complexity of the algorithm and its conditions.\n\n\nIn his piece Sprawl above, Stock created a chaotic branching structure growing on a regular array of blocks. His dark growth is simulated using a surface-growth algorithm.\n\"The primary design element is from an algorithm called off-lattice diffusion-limited aggregation (DLA),\" Stock explains. \"Particles are seeded at specific locations and random walk until they strike any part of the existing structure, then they stick there. The whole thing is then radiosity rendered.\""
  },
  {
    "objectID": "posts/Colors/index.html",
    "href": "posts/Colors/index.html",
    "title": "Season Colors",
    "section": "",
    "text": "Winter colors\n\n\nThis is a generated image with winter colors."
  },
  {
    "objectID": "posts/Cognition_fields/index.html",
    "href": "posts/Cognition_fields/index.html",
    "title": "The field of cognitive science, or not?",
    "section": "",
    "text": "Fields of cognitive science\n\n\nThis image is often used to describe the ever growing domain of cognitive science, however due to a variety of reasons, it is my belief that this is an inadequately defined representation of the field.\nIt is also further inaccurate in the representation insofar as certain fields are more closely related than others and this visual representation does not take these weights into consideration either.\nFurther as an issue, the image does not represent a far enough branched out structure that would involve the sub domains and related fields such that the viewer may get a more comprehensive understanding of how the fields are correlated and what skills might be required to implement a solution or project in the domain.\nThe lay person may feel like they are obtaining a lot of information from this graphic but rather, they would be lacking key insights that would actually solidify the information that they are viewing. Although one could argue that the key purpose of the graphic is simply a simple visual introduction into the concept of what the domain of cognitive science holistically means as a whole, rather than specific parts of it, it is my opinion that the designer would have been better served using another differentiator such as color and an indication of what level of expertise the viewer must have reached before attempting to comprehend the subject matter at the color coded level."
  },
  {
    "objectID": "posts/Charts 1-4/index.html",
    "href": "posts/Charts 1-4/index.html",
    "title": "Research Proposal",
    "section": "",
    "text": "Presentation"
  },
  {
    "objectID": "posts/Proposal/index.html",
    "href": "posts/Proposal/index.html",
    "title": "Ggplot charts",
    "section": "",
    "text": "Chart 1\n\n# Load ggplot2\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Make data\ndata &lt;- data.frame(\n  group = c(\"A \", \"B \", \"C \", \"D \"),\n  value = c(50, 50, 56, 50),\n  number_of_obs = c(150, 250, 300, 275)\n)\n\n# Calculate the future positions on the x-axis of each bar (left border, central position, right border)\ndata$right &lt;- cumsum(data$number_of_obs) + 30 * (0:(nrow(data) - 1))\ndata$left &lt;- data$right - data$number_of_obs\n\n# Plot\nggplot(data, aes(ymin = 0)) +\n  geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) +\n  xlab(\"Observations\") +\n  ylab(\"Value\") +\n  theme_minimal() +  # Use the default ggplot2 theme\n  theme(legend.position = \"none\")\n\n\n\n\nChart 2\n\nlibrary(ggplot2)\nlibrary(patchwork)\n\ndata &lt;- data.frame(\n  Category = c(\"A\", \"B\", \"C\", \"D\"),\n  Value = c(10, 15, 8, 20)\n)\n\nbar_chart &lt;- ggplot(data, aes(x = Category, y = Value)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Bar Chart\")\n\nscatter_plot &lt;- ggplot(data, aes(x = Category, y = Value)) +\n  geom_point() +\n  labs(title = \"Scatter Plot\")\n\ncharts_combined &lt;- bar_chart + scatter_plot + plot_layout(ncol = 2)\n\nprint(charts_combined)\n\n\n\n\nChart 3\n\n# Load the ggplot2 and gridExtra libraries\nlibrary(ggplot2)\nlibrary(gridExtra)\n\n# Create a sample dataset\ndata &lt;- data.frame(\n  Category = c(\"Category A\", \"Category B\", \"Category C\", \"Category D\", \"Category E\", \"Category F\"),\n  Value1 = c(30, 50, 20, 40, 60, 25),\n  Value2 = c(40, 60, 30, 50, 70, 35)\n)\n\n# Create the first vertical bar chart (Value1)\nplot1 &lt;- ggplot(data, aes(x = Category, y = Value1, fill = Category)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = rainbow(nrow(data))) +\n  labs(title = \"Vertical Bar Chart 1\",\n       x = NULL,\n       y = \"Value 1\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  coord_flip()\n\n# Create the second vertical bar chart (Value2)\nplot2 &lt;- ggplot(data, aes(x = Category, y = Value2, fill = Category)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = rainbow(nrow(data))) +\n  labs(title = \"Vertical Bar Chart 2\",\n       x = NULL,\n       y = \"Value 2\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  coord_flip()\n\n# Arrange the two plots side by side\ngrid.arrange(plot1, plot2, ncol = 2)\n\n\n\n\nChart 4\n\n# Load the ggplot2 library\nlibrary(ggplot2)\n\n# Create a sample dataset\ndata &lt;- data.frame(\n  Category = c(\"Category A\", \"Category B\", \"Category C\"),\n  Value1 = c(30, 50, 20),\n  Value2 = c(40, 60, 30)\n)\n\n# Reshape the data to long format for overlapping columns\nlibrary(tidyr)\ndata_long &lt;- pivot_longer(data, cols = starts_with(\"Value\"), names_to = \"Variable\", values_to = \"Value\")\n\n# Create the column chart with slightly overlapping columns\nggplot(data_long, aes(x = Category, y = Value, fill = Variable)) +\n  geom_col(position = position_dodge(width = 0.7)) +  # Adjust the width for overlapping\n  labs(title = \"Overlapping Column Chart\",\n       x = \"Category\",\n       y = \"Value\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/Final Project/index.html",
    "href": "posts/Final Project/index.html",
    "title": "Final Presentation",
    "section": "",
    "text": "Presentation"
  },
  {
    "objectID": "posts/Assignment5/index.html",
    "href": "posts/Assignment5/index.html",
    "title": "Assignment 6",
    "section": "",
    "text": "Shiny app demo\n\n\nObjective: The goal of the Shiny app is to perform sentiment analysis on user-entered text using a custom AFINN dataset. It provides interactive visualizations, specifically bar and pie charts, to represent the sentiment scores and distribution of the entered text.\nComponents:\n\nDashboard Layout:\n\nThe dashboard consists of a header with the title “Sentiment Analysis App.”\nThe sidebar menu includes a “Charts” option.\n\nCharts Tab:\n\nThe “Charts” tab includes the following components:\n\nA header “Sentiment Analysis Charts.”\nA text input field labeled “Enter Text” for users to input the text they want to analyze.\nA bar chart displaying the sentiment score based on the AFINN data. The chart title is “Sentiment Score Bar Chart,” and the y-axis is labeled “Sentiment Score.”\nA pie chart illustrating the sentiment distribution of the entered text. The chart title is “Sentiment Score Pie Chart.”\n\n\n\nFunctionality:\n\nUsers can input text in the provided text input field.\nThe app calculates the sentiment score based on the AFINN data for the entered text.\nThe sentiment score is visually represented in both a bar chart and a pie chart.\nThe bar chart shows the overall sentiment score, and the pie chart depicts the distribution of positive and negative sentiments.\n\nUsage:\n\nUsers can enter any text in the input field to see the corresponding sentiment analysis charts.\nThe charts dynamically update based on the entered text, providing an interactive and real-time sentiment analysis experience.\n\nNote:\n\nThe app utilizes the AFINN data, which is a pre-defined list of words with associated sentiment scores.\nThe code assumes the existence of an AFINN data file named “afinn_data.csv.”"
  },
  {
    "objectID": "posts/Assignment5/index.html#ggplot-charts",
    "href": "posts/Assignment5/index.html#ggplot-charts",
    "title": "Assignment 5",
    "section": "GGPlot Charts",
    "text": "GGPlot Charts\n\nHistogram\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Generate a random dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- rnorm(1000)\n\n# Create a histogram using ggplot2\nggplot(data.frame(x = data), aes(x)) +\n  geom_histogram(fill = \"skyblue\", color = \"black\", bins = 30) +\n  ggtitle(\"Histogram Example\") +\n  xlab(\"Values\") +\n  ylab(\"Frequency\")\n\n\n\n\n\n\nBar chart\n\n\nVertical\n\n# Generate a sample dataset (replace this with your own data)\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\", \"Category D\")\nvalues &lt;- c(25, 40, 30, 20)\ndata &lt;- data.frame(categories, values)\n\n# Create a vertical bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  ggtitle(\"Vertical Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nHorizontal\n\n# Create a horizontal bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_col() +\n  ggtitle(\"Horizontal Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\") +\n  coord_flip()  # Flipping coordinates for a horizontal chart\n\n\n\n\n\n\nPie Chart\n\n# Create a pie chart using ggplot2\nggplot(data, aes(x = \"\", y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  ggtitle(\"Pie Chart\") +\n  coord_polar(\"y\")\n\n\n\n\n\n\nBox plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  group = rep(c(\"Group 1\", \"Group 2\", \"Group 3\"), each = 100),\n  values = c(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 2, sd = 1), rnorm(100, mean = 1, sd = 1))\n)\n\n# Create a boxplot using ggplot2\nggplot(data, aes(x = group, y = values, fill = group)) +\n  geom_boxplot() +\n  ggtitle(\"Boxplot Example\") +\n  xlab(\"Groups\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nScatter plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  x = rnorm(100),\n  y = 2 * rnorm(100) + rnorm(100)\n)\n\n# Create a scatterplot using ggplot2\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"darkorange\") +\n  ggtitle(\"Scatterplot Example\") +\n  xlab(\"X-axis\") +\n  ylab(\"Y-axis\")"
  },
  {
    "objectID": "posts/Assignment7/index.html",
    "href": "posts/Assignment7/index.html",
    "title": "Assignment 7",
    "section": "",
    "text": "Data set used found at “https://www2.imm.dtu.dk/pubdb/pubs/6010-full.html”\n\n\nGenerate a scatter plot\n\n# Read the CSV file\ndata &lt;- read.csv(\"AFINN-111.csv\")\n\n# Assuming the CSV file has columns named \"Word\" and \"Sentiment\"\n# Replace them with the actual column names in your CSV file\nword &lt;- data$Word\nsentiment &lt;- data$Sentiment\n\n# Generate a scatterplot\nplot(sentiment, main = \"Sentiment Scatterplot\", xlab = \"Word Index\", ylab = \"Sentiment\", col = \"blue\", pch = 16)\n\n\n\n\nIn this analysis, a CSV file containing sentiment data is processed in R to generate a scatterplot depicting the sentiment scores associated with different words. The file consists of two columns: “Word,” representing individual words, and “Sentiment,” indicating their corresponding sentiment scores as integers. The R script utilizes the base plot() function to create a scatterplot, with the x-axis representing the index of each word and the y-axis representing the associated sentiment score. Any missing or non-finite values are handled to ensure the accuracy of the plot. The resulting visualization provides an overview of the sentiment distribution across the words in the dataset, enabling a quick assessment of the sentiment patterns present in the data.\n\n\nGenerate a comparative scatter plot and bubble chart\n\n# Install and load the ggplot2 package\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Read the CSV file\ndata &lt;- read.csv(\"AFINN-111.csv\")\n\n# Create a new column for index\ndata$Index &lt;- seq_along(data$Word)\n\n# Assuming the CSV file has columns named \"Index\", \"Word\", and \"Sentiment\"\n# Replace them with the actual column names in your CSV file\nindex &lt;- data$Index\nword &lt;- data$Word\nsentiment &lt;- data$Sentiment\n\n# Remove rows with missing values\ndata &lt;- na.omit(data)\n\n# Create a comparative scatter plot with index ranges on the x-axis\nggplot(data, aes(x = Index, y = Sentiment)) +\n  geom_point(aes(size = abs(Sentiment)), color = \"blue\", alpha = 0.7) +\n  scale_size_continuous(range = c(3, 10)) +\n  labs(title = \"Comparative Scatter Plot\", x = \"Index Range\", y = \"Sentiment\") +\n  theme_minimal()\n\n\n\n# Create a bubble chart with index ranges on the x-axis\nggplot(data, aes(x = Index, y = Sentiment, size = abs(Sentiment), color = Sentiment)) +\n  geom_point(alpha = 0.7) +\n  scale_size_continuous(range = c(3, 20)) +\n  labs(title = \"Bubble Chart\", x = \"Index Range\", y = \"Sentiment\") +\n  theme_minimal()\n\n\n\n\nThe provided R code utilizes the ggplot2 package to generate two distinct visualizations based on sentiment data extracted from a CSV file. The code begins by loading the necessary libraries and reading the data into a dataframe. A new index column is created to represent the row indices. Missing values are handled using the na.omit() function. The first visualization is a comparative scatter plot, where the x-axis displays index ranges, the y-axis represents sentiment scores, and point sizes correspond to the absolute values of sentiment scores. The second visualization is a bubble chart that maintains the same x and y-axis representations but introduces varying bubble sizes based on sentiment magnitude and color-coded sentiment scores. Both visualizations offer insights into the distribution and magnitude of sentiment scores across the dataset, providing a comprehensive exploration of sentiment trends with respect to index.\n\n\nGenerate a circular area chart\n\n# Install and load the ggplot2 package\ninstall.packages(\"ggplot2\")\n\nWarning: package 'ggplot2' is in use and will not be installed\n\nlibrary(ggplot2)\n\n# Read the CSV file\ndata &lt;- read.csv(\"AFINN-111.csv\")\n\n# Assuming the CSV file has columns named \"Word\" and \"Sentiment\"\n# Replace them with the actual column names in your CSV file\nword &lt;- data$Word\nsentiment &lt;- data$Sentiment\n\n# Create a data frame for plotting\nplot_data &lt;- data.frame(Word = word, Sentiment = sentiment)\n\n# Convert sentiment scores to positive values for line chart\nplot_data$Sentiment &lt;- abs(plot_data$Sentiment)\n\n# Remove missing values\nplot_data &lt;- na.omit(plot_data)\n\n# Sort the data by sentiment values\nplot_data &lt;- plot_data[order(plot_data$Sentiment, decreasing = TRUE), ]\n\n# Create an index column for x-axis\nplot_data$Index &lt;- seq_along(plot_data$Word)\n\n# Create a line chart with index on the x-axis\nggplot(plot_data, aes(x = Index, y = Sentiment, group = 1)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Sentiment Across Data\", x = \"Index\", y = \"Sentiment\") +\n  theme_minimal()\n\n\n\n\nThe line chart depicts the sentiment values across the dataset, where each point on the x-axis corresponds to the index of a word in the dataset. The sentiment values, represented on the y-axis, are derived from the “Sentiment” column, with absolute values used for visualization clarity. The blue line traces the fluctuation in sentiment, illustrating how sentiments vary across different entries in the dataset. The ascending peaks and descending troughs indicate the intensity and direction of sentiment changes, offering a visual narrative of sentiment trends throughout the dataset. The index on the x-axis provides a sequential ordering of words, allowing for a straightforward interpretation of sentiment patterns across the dataset."
  },
  {
    "objectID": "posts/Assignment6/index.html",
    "href": "posts/Assignment6/index.html",
    "title": "Assignment 5",
    "section": "",
    "text": "# Generate a random dataset\nset.seed(123)\ndata &lt;- rnorm(1000)\n\n# Create a histogram\nhist(data, col = \"skyblue\", main = \"Histogram Example\", xlab = \"Values\", ylab = \"Frequency\")"
  },
  {
    "objectID": "posts/Assignment6/index.html#ggplot-charts",
    "href": "posts/Assignment6/index.html#ggplot-charts",
    "title": "Assignment 5",
    "section": "GGPlot Charts",
    "text": "GGPlot Charts\n\nHistogram\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Generate a random dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- rnorm(1000)\n\n# Create a histogram using ggplot2\nggplot(data.frame(x = data), aes(x)) +\n  geom_histogram(fill = \"skyblue\", color = \"black\", bins = 30) +\n  ggtitle(\"Histogram Example\") +\n  xlab(\"Values\") +\n  ylab(\"Frequency\")\n\n\n\n\n\n\nBar chart\n\n\nVertical\n\n# Generate a sample dataset (replace this with your own data)\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\", \"Category D\")\nvalues &lt;- c(25, 40, 30, 20)\ndata &lt;- data.frame(categories, values)\n\n# Create a vertical bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  ggtitle(\"Vertical Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nHorizontal\n\n# Create a horizontal bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_col() +\n  ggtitle(\"Horizontal Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\") +\n  coord_flip()  # Flipping coordinates for a horizontal chart\n\n\n\n\n\n\nPie Chart\n\n# Create a pie chart using ggplot2\nggplot(data, aes(x = \"\", y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  ggtitle(\"Pie Chart\") +\n  coord_polar(\"y\")\n\n\n\n\n\n\nBox plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  group = rep(c(\"Group 1\", \"Group 2\", \"Group 3\"), each = 100),\n  values = c(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 2, sd = 1), rnorm(100, mean = 1, sd = 1))\n)\n\n# Create a boxplot using ggplot2\nggplot(data, aes(x = group, y = values, fill = group)) +\n  geom_boxplot() +\n  ggtitle(\"Boxplot Example\") +\n  xlab(\"Groups\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nScatter plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  x = rnorm(100),\n  y = 2 * rnorm(100) + rnorm(100)\n)\n\n# Create a scatterplot using ggplot2\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"darkorange\") +\n  ggtitle(\"Scatterplot Example\") +\n  xlab(\"X-axis\") +\n  ylab(\"Y-axis\")"
  },
  {
    "objectID": "posts/Assignment8/index.html",
    "href": "posts/Assignment8/index.html",
    "title": "Assignment 8",
    "section": "",
    "text": "Creating a Shiny dashboard using YouTube API data and hosting it on Quatro has been an intriguing yet challenging endeavor. Let me share a detailed account of the difficulties I encountered throughout this process:\n\n\nManaging the quotas and limits imposed by the YouTube API was a critical aspect. Exceeding these limitations could result in temporary restrictions or additional costs. Staying mindful of these constraints, especially when dealing with a substantial amount of data, was not feasible.\n\n\n\nSetting up proper authentication and authorization was complex. I had to deal with OAuth 2.0, API keys, and OAuth tokens, which I could not resolve as per the dashboard creation process.\n\n\n\nRetrieving and parsing the extensive JSON responses from the YouTube API demanded a solid understanding of the API’s structure. Effectively extracting relevant information for my Shiny dashboard required advanced data manipulation techniques, which did not prove possible finally.\n\n\n\nAs with any integration of external APIs, debugging issues and handling errors gracefully were constant challenges. Diagnosing problems related to data retrieval, authentication, or other API-related issues required a systematic approach, which could be inspected in greater depth with more time.\n\n\n\nDue to these challenges, creation of an insightful Shiny dashboard did not prove feasible. Leveraging YouTube API data provided a valuable user experience, and the development process taught me to approach challenges methodically, stay informed about changes, and seek community support when needed and we can possibly hope to resolve these as a future extension to this project."
  },
  {
    "objectID": "posts/Assignment8/index.html#ggplot-charts",
    "href": "posts/Assignment8/index.html#ggplot-charts",
    "title": "Assignment 8",
    "section": "GGPlot Charts",
    "text": "GGPlot Charts\n\nHistogram\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Generate a random dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- rnorm(1000)\n\n# Create a histogram using ggplot2\nggplot(data.frame(x = data), aes(x)) +\n  geom_histogram(fill = \"skyblue\", color = \"black\", bins = 30) +\n  ggtitle(\"Histogram Example\") +\n  xlab(\"Values\") +\n  ylab(\"Frequency\")\n\n\n\n\n\n\nBar chart\n\n\nVertical\n\n# Generate a sample dataset (replace this with your own data)\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\", \"Category D\")\nvalues &lt;- c(25, 40, 30, 20)\ndata &lt;- data.frame(categories, values)\n\n# Create a vertical bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  ggtitle(\"Vertical Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nHorizontal\n\n# Create a horizontal bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_col() +\n  ggtitle(\"Horizontal Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\") +\n  coord_flip()  # Flipping coordinates for a horizontal chart\n\n\n\n\n\n\nPie Chart\n\n# Create a pie chart using ggplot2\nggplot(data, aes(x = \"\", y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  ggtitle(\"Pie Chart\") +\n  coord_polar(\"y\")\n\n\n\n\n\n\nBox plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  group = rep(c(\"Group 1\", \"Group 2\", \"Group 3\"), each = 100),\n  values = c(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 2, sd = 1), rnorm(100, mean = 1, sd = 1))\n)\n\n# Create a boxplot using ggplot2\nggplot(data, aes(x = group, y = values, fill = group)) +\n  geom_boxplot() +\n  ggtitle(\"Boxplot Example\") +\n  xlab(\"Groups\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nScatter plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  x = rnorm(100),\n  y = 2 * rnorm(100) + rnorm(100)\n)\n\n# Create a scatterplot using ggplot2\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"darkorange\") +\n  ggtitle(\"Scatterplot Example\") +\n  xlab(\"X-axis\") +\n  ylab(\"Y-axis\")"
  },
  {
    "objectID": "posts/Assignment8/dashboard.html",
    "href": "posts/Assignment8/dashboard.html",
    "title": "Assignment 5",
    "section": "",
    "text": "# Generate a random dataset\nset.seed(123)\ndata &lt;- rnorm(1000)\n\n# Create a histogram\nhist(data, col = \"skyblue\", main = \"Histogram Example\", xlab = \"Values\", ylab = \"Frequency\")"
  },
  {
    "objectID": "posts/Assignment8/dashboard.html#ggplot-charts",
    "href": "posts/Assignment8/dashboard.html#ggplot-charts",
    "title": "Assignment 5",
    "section": "GGPlot Charts",
    "text": "GGPlot Charts\n\nHistogram\n\n# Load the ggplot2 package\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n# Generate a random dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- rnorm(1000)\n\n# Create a histogram using ggplot2\nggplot(data.frame(x = data), aes(x)) +\n  geom_histogram(fill = \"skyblue\", color = \"black\", bins = 30) +\n  ggtitle(\"Histogram Example\") +\n  xlab(\"Values\") +\n  ylab(\"Frequency\")\n\n\n\n\n\n\nBar chart\n\n\nVertical\n\n# Generate a sample dataset (replace this with your own data)\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\", \"Category D\")\nvalues &lt;- c(25, 40, 30, 20)\ndata &lt;- data.frame(categories, values)\n\n# Create a vertical bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  ggtitle(\"Vertical Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nHorizontal\n\n# Create a horizontal bar chart using ggplot2\nggplot(data, aes(x = categories, y = values, fill = categories)) +\n  geom_col() +\n  ggtitle(\"Horizontal Bar Chart\") +\n  xlab(\"Categories\") +\n  ylab(\"Values\") +\n  coord_flip()  # Flipping coordinates for a horizontal chart\n\n\n\n\n\n\nPie Chart\n\n# Create a pie chart using ggplot2\nggplot(data, aes(x = \"\", y = values, fill = categories)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  ggtitle(\"Pie Chart\") +\n  coord_polar(\"y\")\n\n\n\n\n\n\nBox plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  group = rep(c(\"Group 1\", \"Group 2\", \"Group 3\"), each = 100),\n  values = c(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 2, sd = 1), rnorm(100, mean = 1, sd = 1))\n)\n\n# Create a boxplot using ggplot2\nggplot(data, aes(x = group, y = values, fill = group)) +\n  geom_boxplot() +\n  ggtitle(\"Boxplot Example\") +\n  xlab(\"Groups\") +\n  ylab(\"Values\")\n\n\n\n\n\n\nScatter plot\n\n# Generate a sample dataset (replace this with your own data)\nset.seed(123)\ndata &lt;- data.frame(\n  x = rnorm(100),\n  y = 2 * rnorm(100) + rnorm(100)\n)\n\n# Create a scatterplot using ggplot2\nggplot(data, aes(x = x, y = y)) +\n  geom_point(color = \"darkorange\") +\n  ggtitle(\"Scatterplot Example\") +\n  xlab(\"X-axis\") +\n  ylab(\"Y-axis\")"
  },
  {
    "objectID": "posts/Assignment8/index.html#plan-for-quarto-dashboard-for-project",
    "href": "posts/Assignment8/index.html#plan-for-quarto-dashboard-for-project",
    "title": "Assignment 8",
    "section": "",
    "text": "Creating a Shiny dashboard using YouTube API data and hosting it on Quatro has been an intriguing yet challenging endeavor. Let me share a detailed account of the difficulties I encountered throughout this process:\n\n\nManaging the quotas and limits imposed by the YouTube API was a critical aspect. Exceeding these limitations could result in temporary restrictions or additional costs. Staying mindful of these constraints, especially when dealing with a substantial amount of data, was not feasible.\n\n\n\nSetting up proper authentication and authorization was complex. I had to deal with OAuth 2.0, API keys, and OAuth tokens, which I could not resolve as per the dashboard creation process.\n\n\n\nRetrieving and parsing the extensive JSON responses from the YouTube API demanded a solid understanding of the API’s structure. Effectively extracting relevant information for my Shiny dashboard required advanced data manipulation techniques, which did not prove possible finally.\n\n\n\nAs with any integration of external APIs, debugging issues and handling errors gracefully were constant challenges. Diagnosing problems related to data retrieval, authentication, or other API-related issues required a systematic approach, which could be inspected in greater depth with more time.\n\n\n\nDue to these challenges, creation of an insightful Shiny dashboard did not prove feasible. Leveraging YouTube API data provided a valuable user experience, and the development process taught me to approach challenges methodically, stay informed about changes, and seek community support when needed and we can possibly hope to resolve these as a future extension to this project."
  }
]
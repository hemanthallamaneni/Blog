---
title: "Assignment 9"
author: "Hemanth Allamaneni"
date: "2023-11-10"
categories: [analysis]
---

```{r}
# Set a CRAN mirror (choose a mirror that is geographically close to you)
options(repos = c(CRAN = "https://cloud.r-project.org"))

# Install and load the required packages
install.packages(c("quantmod", "tidyverse", "dygraphs"))
lapply(c("quantmod", "tidyverse", "dygraphs"), require, character.only = TRUE)

```

## Fetch google data using quantmod package

```{r}
# Install and load the quantmod package
install.packages("quantmod")
library(quantmod)

# Specify the stock symbol and data source
stock_symbol <- "GOOGL"
data_source <- "yahoo"

# Fetch stock data for the past year
getSymbols(stock_symbol, src = data_source, from = Sys.Date() - 365, to = Sys.Date())

# View the first few rows of the data
head(GOOGL)

# Plot the time series (adjusted closing prices)
chartSeries(GOOGL$GOOGL.Adjusted, name = "GOOGL Stock Prices", type = "line")
```

## The above graph describes along with procedure: **Time Series Object Class:**

The time series data for Alphabet Inc. (GOOGL) obtained using **`quantmod`** is stored as an object of class **`xts`** (eXtensible Time Series). The **`xts`** class in R is designed to handle time series data efficiently, providing a convenient structure for analysis and visualization.

#### 2. **Variables in the Time Series Object:**

The time series object contains multiple variables or columns, each representing a specific aspect of the stock data. Here are some key variables:

-   **GOOGL.Open:** Opening prices of GOOGL stock.

-   **GOOGL.High:** Highest prices during the trading day.

-   **GOOGL.Low:** Lowest prices during the trading day.

-   **GOOGL.Close:** Closing prices of GOOGL stock.

-   **GOOGL.Volume:** Volume of shares traded.

-   **GOOGL.Adjusted:** Adjusted closing prices, accounting for corporate actions like dividends and stock splits.

#### 3. **Data Exploration:**

The **`head`** function is used to view the first few rows of the time series data. This provides a glimpse into the structure and content of the dataset, allowing us to understand the available variables and their values.

#### 4. **Plotting the Time Series:**

The **`chartSeries`** function is employed to create a line chart of the adjusted closing prices of GOOGL stock. This visualization helps in understanding the trend and fluctuations in stock prices over the specified time period.

```{r}
# Plotting time series data using TSstudio
# install.packages(c("quantmod", "tidyverse","TSstudio"))
# lapply(c("quantmod", "tidyverse","TSstudio"), require, character.only = TRUE)

library(TSstudio)
quantmod::getSymbols("AAPL", src="yahoo")
class(AAPL)
ts_plot(AAPL$AAPL.Adjusted, 
        title = "Apple Stock prices",
        Ytitle = "")
class(AAPL) # What class is this object?

# Some sample dataset from TSstudio
ts_seasonal(USgas, type = "") # month-year matrix data

# What class is USgas?

# Sample charts
ts_heatmap(USgas)
ts_cor(USgas) # ACF and PACF
ts_lags(USgas, margin = .01)
usgas=data.frame(USgas)
```

```{r}
# Plotting time series data using dygraph
# install.packages(c("quantmod", "tidyverse","dygraphs"))
# lapply(c("quantmod", "tidyverse","dygraphs"), require, character.only = TRUE)

library(dygraphs)
par(family="Palatino")
quantmod::getSymbols("GOOGL", src="yahoo")

class(GOOGL)
m = tail(GOOGL, n=30)
m =m[,1:(ncol(m)-2)] # drop last two columns 
names(m)<-c('Open', 'High', 'Low', 'Close') # rename columns for plotting
path <- getwd()
setwd("C:/EPPS 6356/myBlog/posts/Assignment9") # place dygraph.css into the same directory
dygraph(m, main = "Google Stock Prices (Candlestick Chart)")  |>  
  dyCandlestickGroup(c('Open', 'High', 'Low', 'Close')) |> 
  dyCandlestick()  |> 
  dyLegend(show = "always", hideOnMouseOut = T) |> 
  dyCSS("dygraph.css")
```

```{r}
# Install and load required packages
install.packages(c("quantmod", "forecast", "tseries"))
lapply(c("quantmod", "forecast", "tseries"), require, character.only = TRUE)

# Fetch stock data for Google and Apple using quantmod
getSymbols("GOOGL", src = "yahoo")
getSymbols("AAPL", src = "yahoo")

# Extract adjusted closing prices
googl_prices <- Cl(GOOGL)
aapl_prices <- Cl(AAPL)

# Combine data into a data frame
stock_data <- data.frame(GOOGL = googl_prices, AAPL = aapl_prices)

# Plot the time series data
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(googl_prices, main = "Google Stock Prices", ylab = "Adjusted Close", col = "blue", type = "l")
plot(aapl_prices, main = "Apple Stock Prices", ylab = "Adjusted Close", col = "red", type = "l")

# Trend Analysis
# You can visually inspect the plot for trends. Additionally, you can use trend analysis methods.

# Stationarity Analysis
# Use the Augmented Dickey-Fuller test to check for stationarity
adf_test_googl <- adf.test(googl_prices)
adf_test_aapl <- adf.test(aapl_prices)

cat("ADF Test for Google Stock Prices:\n", "p-value =", adf_test_googl$p.value, "\n")
cat("ADF Test for Apple Stock Prices:\n", "p-value =", adf_test_aapl$p.value, "\n")

# pdq Analysis
# Use auto.arima to identify potential parameters
library(forecast)
auto_arima_googl <- auto.arima(googl_prices)
auto_arima_aapl <- auto.arima(aapl_prices)

cat("ARIMA Parameters for Google Stock Prices:\n", auto_arima_googl$arma, "\n")
cat("ARIMA Parameters for Apple Stock Prices:\n", auto_arima_aapl$arma, "\n")

```

In this time series analysis, we examine the historical stock prices of Google (GOOGL) and Apple (AAPL) to gain insights into three key aspects: trend, stationarity, and the potential parameters (pdq) for ARIMA models.

#### i. Trend Analysis:

Visual inspection of the time series plots reveals trends in both Google and Apple stock prices. In the plots, we observe fluctuations in the adjusted closing prices over time. The visual analysis provides a qualitative understanding of the general direction of the stock prices. However, a more quantitative trend analysis could involve using methods like moving averages or decomposition techniques to identify underlying patterns.

#### ii. Stationarity Analysis:

To assess stationarity, we employ the Augmented Dickey-Fuller (ADF) test, which checks for the presence of a unit root in the time series data. The null hypothesis of the ADF test is that the time series has a unit root and is non-stationary. A lower p-value provides stronger evidence against stationarity.

Results from the ADF test indicate the following:

-   **Google (GOOGL):**

    -   ADF Test p-value: *\<p-value\>*

    -   Interpretation: *\<Stationary or Non-Stationary\>*

-   **Apple (AAPL):**

    -   ADF Test p-value: *\<p-value\>*

    -   Interpretation: *\<Stationary or Non-Stationary\>*

The stationarity analysis informs us about the nature of the time series and whether further differencing or transformations might be needed for modeling.

#### iii. pdq Analysis:

To identify potential parameters (p, d, q) for ARIMA models, we utilize the **`auto.arima`** function from the **`forecast`** package. This function automatically searches for the best-fitting ARIMA model based on the Akaike Information Criterion (AIC). The identified parameters provide insights into the autoregressive, differencing, and moving average components of the time series.

Results from the pdq analysis indicate the following:

-   **Google (GOOGL):**

    -   ARIMA Parameters: *\<p, d, q\>*

-   **Apple (AAPL):**

    -   ARIMA Parameters: *\<p, d, q\>*

The pdq analysis guides us in selecting appropriate parameters for ARIMA modeling, facilitating the construction of predictive models based on historical stock prices.

In summary, this time series analysis provides a comprehensive understanding of trends, stationarity, and potential ARIMA parameters for both Google and Apple stock prices. Further refinements and model fitting can be conducted based on the specific requirements of forecasting or predictive analytics.
